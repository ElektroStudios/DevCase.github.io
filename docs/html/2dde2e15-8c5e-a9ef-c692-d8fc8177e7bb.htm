<!DOCTYPE html >
<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" href="../css/bulma.css" />
    <link rel="stylesheet" href="../css/font-awesome.min.css" />
    <link rel="stylesheet" href="../css/presentationStyle.css" />
    <link rel="stylesheet" href="../css/vs.min.css" />
    <script src="../scripts/jquery-3.5.1.min.js"></script>
    <script src="../scripts/clipboard.min.js"></script>
    <script src="../scripts/highlight.min.js"></script>
    <script src="../scripts/presentationStyle.js"></script>
    <title>NtDll Methods</title>
    <meta name="Title" content="Methods" />
    <meta name="Help.Id" content="Methods.T:DevCase.Win32.NativeMethods.NtDll" />
    <meta name="Help.ContentType" content="Reference" />
    <meta name="container" content="DevCase.Win32.NativeMethods" />
    <meta name="guid" content="2dde2e15-8c5e-a9ef-c692-d8fc8177e7bb" />
    <meta name="tocFile" content="../toc/IDLFFA.xml" />
  </head>
  <body>
    <div class="fixedLayout">
      <div id="Header" class="fixedHeader">
        <div class="pageHeader level mb-0 py-2 px-4">
          <div id="TitleContainer" class="level-left">
            <div id="DocumentationTitle" class="level-item">DevCase 6.0 API Reference for NET Framework</div>
          </div>
          <div id="LangFilterSearchContainer" class="level-right">
            <div class="level-item">
              <div class="dropdown is-hoverable">
                <div class="dropdown-trigger">
                  <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                    <span id="CurrentLanguage"></span>
                    <span class="icon is-small">
                      <i class="fa fa-angle-down" aria-hidden="true"></i>
                    </span>
                  </button>
                </div>
                <div class="dropdown-menu" role="menu">
                  <div id="LanguageSelections" class="dropdown-content">
                    <a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="xaml">XAML</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="asp">ASP.NET</a>
                  </div>
                </div>
              </div>
            </div>
            <div class="level-item">
              <form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;">
                <div class="field">
                  <div class="control has-icons-left">
                    <input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" />
                    <span class="icon is-small is-left">
                      <i class="fa fa-search"></i>
                    </span>
                    <button id="SearchButton" type="submit" class="is-hidden"></button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <div class="fixedContent">
        <div id="HeaderPrelimContainer" class="level my-1 px-2">
          <div id="HeaderTextContainer" class="level-left">
            <div class="level-item">
              <span class="has-text-grey-light">
                <div style="text-align: left;">
  <a href="..\index.html">🏠 Home</a>
  <span style="margin: 0 5px;">|</span>
  <a href="javascript:history.back()">⬅️ Back</a>
  <span style="margin: 0 5px;">|</span>
  <a href="javascript:history.forward()">➡️ Forward</a>
</div>
              </span>
            </div>
          </div>
        </div>
        <nav class="breadcrumb my-1 px-2 border-bottom" role="navigation">
          <ul id="TopicBreadcrumbs" />
        </nav>
        <div id="ContentContainer" class="columns pl-5 pr-5 fixedContent">
          <div id="ShowHideTOCColumn" class="column is-hidden-tablet">
            <a id="ShowHideTOC">Show/Hide TOC</a>
          </div>
          <div id="TOCColumn" class="column is-hidden-mobile">
            <nav class="toc">
              <ul id="TableOfContents" class="toc-menu" />
            </nav>
          </div>
          <div id="Resizer" class="is-hidden"></div>
          <div id="TopicContent" class="column content is-7">
            <h1>Nt<wbr />Dll Methods</h1>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Methods</h2>
            <div id="IDIDASection">
              <table id="MethodList" class="table is-hoverable">
                <tr>
                  <td>
                    <a href="aa895c87-4a91-652f-ff4b-ed76557958cf.htm">DbgBreakPoint</a>
                  </td>
                  <td>
 Breaks into the kernel debugger.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="ce641716-adaf-a0a4-46b3-4389af7c0785.htm">DbgPrompt</a>
                  </td>
                  <td>
 Displays a caller-specified user prompt string on the kernel debugger's display device and obtains a user response string.
 </td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">Equals</span>
                  </td>
                  <td>Determines whether the specified object is equal to the current object.<br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">GetHashCode</span>
                  </td>
                  <td>Serves as the default hash function.<br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">GetType</span>
                  </td>
                  <td>Gets the <span class="noLink">Type</span> of the current instance.<br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="173d1d2e-256d-65d8-bfad-09eb5bff17dc.htm">NtClose</a>
                  </td>
                  <td>
 Closes the specified object handle.
 <p />
 ( <a href="173d1d2e-256d-65d8-bfad-09eb5bff17dc.htm">NtClose(IntPtr)</a> function is superseded by <a href="68d61181-08af-1213-3c82-80f18e3de6b3.htm">CloseHandle(IntPtr)</a> function. )
 <br /><span class="tag is-danger">Obsolete.</span></td>
                </tr>
                <tr>
                  <td>
                    <a href="fb3d27ef-a0e9-8cbd-9e1a-21d834d7c6aa.htm">NtCreateSection(IntPtr<span id="LSTA772737F_0" data-languageSpecificText="cpp=%"></span>, GenericAccessRights, ObjectAttributes, UInt64<span id="LSTA772737F_1" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, SafeFileHandle)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="b24ba1be-35cd-12a8-df37-46dc305a8f39.htm">NtCreateSection(IntPtr<span id="LSTA772737F_2" data-languageSpecificText="cpp=%"></span>, GenericAccessRights, ObjectAttributes, UInt64<span id="LSTA772737F_3" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, IntPtr)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="bff88d7c-5ad3-8c3d-f0d3-7072c3fb836c.htm">NtCreateSection(IntPtr<span id="LSTA772737F_4" data-languageSpecificText="cpp=%"></span>, GenericAccessRights, IntPtr, UInt64<span id="LSTA772737F_5" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, SafeFileHandle)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="f648df48-21c8-f519-8bb9-39d16621862f.htm">NtCreateSection(IntPtr<span id="LSTA772737F_6" data-languageSpecificText="cpp=%"></span>, GenericAccessRights, IntPtr, UInt64<span id="LSTA772737F_7" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, IntPtr)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="90cfcbd9-5284-560c-6737-c81e1226bbcd.htm">NtCreateSection(IntPtr<span id="LSTA772737F_8" data-languageSpecificText="cpp=%"></span>, SectionAccessRights, ObjectAttributes, UInt64<span id="LSTA772737F_9" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, SafeFileHandle)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="5e598008-f5ef-1b7d-d9ce-96aee626d5a0.htm">NtCreateSection(IntPtr<span id="LSTA772737F_10" data-languageSpecificText="cpp=%"></span>, SectionAccessRights, ObjectAttributes, UInt64<span id="LSTA772737F_11" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, IntPtr)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="20179f59-a159-65c7-017a-182b9a8d4e43.htm">NtCreateSection(IntPtr<span id="LSTA772737F_12" data-languageSpecificText="cpp=%"></span>, SectionAccessRights, IntPtr, UInt64<span id="LSTA772737F_13" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, SafeFileHandle)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="65d6eb9c-ceaf-9264-8959-0a057daceae1.htm">NtCreateSection(IntPtr<span id="LSTA772737F_14" data-languageSpecificText="cpp=%"></span>, SectionAccessRights, IntPtr, UInt64<span id="LSTA772737F_15" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, IntPtr)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="19ddf86e-4d56-5b72-1061-3b57619614b1.htm">NtCreateSection(IntPtr<span id="LSTA772737F_16" data-languageSpecificText="cpp=%"></span>, StandardAccessRights, ObjectAttributes, UInt64<span id="LSTA772737F_17" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, SafeFileHandle)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="ed4c021e-0008-ad01-2a58-f700a9a2b197.htm">NtCreateSection(IntPtr<span id="LSTA772737F_18" data-languageSpecificText="cpp=%"></span>, StandardAccessRights, ObjectAttributes, UInt64<span id="LSTA772737F_19" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, IntPtr)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="3343297d-f19c-d872-03bb-9ee96a9d69dc.htm">NtCreateSection(IntPtr<span id="LSTA772737F_20" data-languageSpecificText="cpp=%"></span>, StandardAccessRights, IntPtr, UInt64<span id="LSTA772737F_21" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, SafeFileHandle)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="b8117210-65a7-ec5d-427f-77aa0c1fe703.htm">NtCreateSection(IntPtr<span id="LSTA772737F_22" data-languageSpecificText="cpp=%"></span>, StandardAccessRights, IntPtr, UInt64<span id="LSTA772737F_23" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, IntPtr)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="e15455f2-9be2-3bd3-2410-4970ebea9c43.htm">NtCreateSection(IntPtr<span id="LSTA772737F_24" data-languageSpecificText="cpp=%"></span>, UInt32, ObjectAttributes, UInt64<span id="LSTA772737F_25" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, SafeFileHandle)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="848eef0d-dcb2-53b4-1776-6dd0f67049ab.htm">NtCreateSection(IntPtr<span id="LSTA772737F_26" data-languageSpecificText="cpp=%"></span>, UInt32, ObjectAttributes, UInt64<span id="LSTA772737F_27" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, IntPtr)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="b8ac7c38-4056-32bd-658b-67fd2f961b83.htm">NtCreateSection(IntPtr<span id="LSTA772737F_28" data-languageSpecificText="cpp=%"></span>, UInt32, IntPtr, UInt64<span id="LSTA772737F_29" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, SafeFileHandle)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="6a8cf58f-17ee-3b9d-6980-ad73c0b82c08.htm">NtCreateSection(IntPtr<span id="LSTA772737F_30" data-languageSpecificText="cpp=%"></span>, UInt32, IntPtr, UInt64<span id="LSTA772737F_31" data-languageSpecificText="cpp=%"></span>, MemoryProtectionOptions, SectionAttributes, IntPtr)</a>
                  </td>
                  <td>
 Creates a section object.
 <p />
 A section object represents a section of memory that can be shared. 
 A process can use a section object to share parts of its memory address space (memory sections) with other processes. 
 <p />
 Section objects also provide the mechanism by which a process can map a file into its memory address space.
 <p />
 Each memory section has one or more corresponding views. 
 A view of a section is a part of the section that is actually visible to a process. 
 The act of creating a view for a section is known as mapping a view of the section. 
 <p />
 Each process that is manipulating the contents of a section has its own view; 
 a process can also have multiple views (to the same or different sections).
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="3d4e3afa-e115-eaf5-1220-17aee34a33fd.htm">NtExtendSection</a>
                  </td>
                  <td>
 Extends the size of an existing section object.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="8d9ac883-a2d9-6784-3494-074d2ecfa843.htm">NtFreezeRegistry</a>
                  </td>
                  <td>
 Pauses registry data flushes for the specified time period.
 <p />
 The function uses a timer to automaticaly unblock the flushes, 
 so there's no need to manually call <a href="a37b6b9f-441f-0359-0e0d-6d7bc8cf484b.htm">NtThawRegistry<span id="LSTA772737F_32" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>, 
 unless you want to end the pause during the timeout period.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="b71e6e9e-dbcb-1fd6-6a37-57a9fcc2deb7.htm">NtMapViewOfSection(IntPtr, SafeProcessHandle, IntPtr<span id="LSTA772737F_33" data-languageSpecificText="cpp=%"></span>, IntPtr, IntPtr, Int64<span id="LSTA772737F_34" data-languageSpecificText="cpp=%"></span>, UIntPtr<span id="LSTA772737F_35" data-languageSpecificText="cpp=%"></span>, SectionInherit, MemoryAllocationType, MemoryProtectionOptions)</a>
                  </td>
                  <td>
 Maps a view of a section into the virtual address space of a subject process.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="7fb07581-21a8-f19e-c16e-7cf167f04041.htm">NtMapViewOfSection(IntPtr, IntPtr, IntPtr<span id="LSTA772737F_36" data-languageSpecificText="cpp=%"></span>, IntPtr, IntPtr, Int64<span id="LSTA772737F_37" data-languageSpecificText="cpp=%"></span>, UIntPtr<span id="LSTA772737F_38" data-languageSpecificText="cpp=%"></span>, SectionInherit, MemoryAllocationType, MemoryProtectionOptions)</a>
                  </td>
                  <td>
 Maps a view of a section into the virtual address space of a subject process.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="75b7aa05-ab8c-2333-6b2f-7007599cbe0b.htm">NtOpenEvent(IntPtr<span id="LSTA772737F_39" data-languageSpecificText="cpp=%"></span>, EventAccessRights, ObjectAttributes<span id="LSTA772737F_40" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Opens a handle to an existing named event object with the specified desired access.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="b191943a-7160-7cd5-f242-9471ffc27b09.htm">NtOpenEvent(IntPtr<span id="LSTA772737F_41" data-languageSpecificText="cpp=%"></span>, GenericAccessRights, ObjectAttributes<span id="LSTA772737F_42" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Opens a handle to an existing named event object with the specified desired access.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="f4bb88a2-6b6b-451d-b850-64d3340884fb.htm">NtOpenEvent(IntPtr<span id="LSTA772737F_43" data-languageSpecificText="cpp=%"></span>, StandardAccessRights, ObjectAttributes<span id="LSTA772737F_44" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Opens a handle to an existing named event object with the specified desired access.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="20cfbf97-e89b-2663-a622-d4ef05d3cfd5.htm">NtOpenEvent(IntPtr<span id="LSTA772737F_45" data-languageSpecificText="cpp=%"></span>, UInt32, ObjectAttributes<span id="LSTA772737F_46" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Opens a handle to an existing named event object with the specified desired access.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="9c469535-8d44-f38a-8a22-da13384ecfc8.htm">NtOpenSection(IntPtr<span id="LSTA772737F_47" data-languageSpecificText="cpp=%"></span>, GenericAccessRights, IntPtr<span id="LSTA772737F_48" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Opens a handle for an existing section object.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="e37c1844-ae81-ab7b-89f3-b06cc7cc1305.htm">NtOpenSection(IntPtr<span id="LSTA772737F_49" data-languageSpecificText="cpp=%"></span>, SectionAccessRights, IntPtr<span id="LSTA772737F_50" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Opens a handle for an existing section object.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="7f105d8f-12af-422f-bdbf-06be7755aef8.htm">NtOpenSection(IntPtr<span id="LSTA772737F_51" data-languageSpecificText="cpp=%"></span>, StandardAccessRights, IntPtr<span id="LSTA772737F_52" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Opens a handle for an existing section object.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="9fc6be9a-0ab7-1865-f57e-2ba0aedb2695.htm">NtOpenSection(IntPtr<span id="LSTA772737F_53" data-languageSpecificText="cpp=%"></span>, UInt32, IntPtr<span id="LSTA772737F_54" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Opens a handle for an existing section object.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="9ce157f8-4fcc-a439-8cfc-71df1a4914be.htm">NtQueryInformationProcess</a>
                  </td>
                  <td>
 Retrieves information about the specified process.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="0360ccc5-87d2-9369-1119-40ea778401dd.htm">NtQueryMutex(IntPtr, MutexInformationClass, MutexBasicInformation<span id="LSTA772737F_55" data-languageSpecificText="cpp=%"></span>, Int32, Int32<span id="LSTA772737F_56" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Queries a mutual exclusion (Mutex) object.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="e795ad58-f781-2d69-4ba2-e87a115f395f.htm">NtQueryMutex(IntPtr, MutexInformationClass, MutexOwnerInformation<span id="LSTA772737F_57" data-languageSpecificText="cpp=%"></span>, Int32, Int32<span id="LSTA772737F_58" data-languageSpecificText="cpp=%"></span>)</a>
                  </td>
                  <td>
 Queries a mutual exclusion (Mutex) object.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="436dbbd9-1157-5f3b-39b0-f49f60e42858.htm">NtRaiseHardError</a>
                  </td>
                  <td>
 This function sends HARDERROR_MSG LPC message to listener (typically CSRSS.EXE). 
 <p />
 This function is called to cause a BSOD (Blue Screen of Death) with specific information.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="879b9f41-61ee-a34e-26eb-29a595ef8a4c.htm">NtResumeProcess</a>
                  </td>
                  <td>
 Resumes a suspended process. 
 <p />
 To suspend a process, call <a href="52024a0a-4863-e5da-db46-5d5ec853f4b2.htm">NtSuspendProcess(IntPtr)</a> function.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="b1ab7656-4a89-e771-11a5-24bc328ad9e0.htm">NtSetEvent</a>
                  </td>
                  <td>
 Sets an event object to a Signaled state and attempts to satisfy as many waits as possible.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="52024a0a-4863-e5da-db46-5d5ec853f4b2.htm">NtSuspendProcess</a>
                  </td>
                  <td>
 Suspends a process. 
 <p />
 When you suspend a process, all the threads of the process will be set to a suspended state.
 <p />
 This cuts off code execution until we resume the process, 
 which consists of resuming each thread under the process which was put into a suspended state.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="a37b6b9f-441f-0359-0e0d-6d7bc8cf484b.htm">NtThawRegistry</a>
                  </td>
                  <td>
 Cancels any registry thawing and restores normal data flushing.
 <p />
 To pause registry data flushes for a specified time period, 
 call <a href="8d9ac883-a2d9-6784-3494-074d2ecfa843.htm">NtFreezeRegistry(UInt64)</a> function. 
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="68eba1d3-a757-d02e-23f9-c4b4e345aec1.htm">NtUnmapViewOfSection(IntPtr, IntPtr)</a>
                  </td>
                  <td>
 Unmaps a view of a section from the virtual address space of a subject process.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="88d64321-94c5-7933-691f-a057ed86e77e.htm">NtUnmapViewOfSection(SafeProcessHandle, IntPtr)</a>
                  </td>
                  <td>
 Unmaps a view of a section from the virtual address space of a subject process.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="6ee3cc9f-0e43-c3f0-e8cc-92c998cf43c6.htm">RtlAdjustPrivilege</a>
                  </td>
                  <td>
 Enables or disables a privilege from the calling thread or process.
 <p />
 Enabling or disabling privileges requires <a href="cb489b79-5681-81c6-d8ab-9a2a606973c7.htm">AdjustPrivileges</a> access.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="b0b4c4bc-a781-41fe-077e-a826944f5f57.htm">RtlComputeCrc32</a>
                  </td>
                  <td>
 Calculate the CRC-32 checksum of a block of bytes.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="e9d3904f-5566-041d-b6bb-4c4b6fbb6339.htm">RtlCrc32</a>
                  </td>
                  <td>
 Calculates the CRC-32 checksum for a block of bytes.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="975ec040-e800-2991-f054-75de82014c72.htm">RtlCrc64</a>
                  </td>
                  <td>
 Calculates the CRC-64 checksum for a block of bytes.
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="91c77a31-0157-72fc-c7e2-60eb3df36e30.htm">RtlRandomEx</a>
                  </td>
                  <td>
 Generates a uniform random number between 0 (zero) to <span class="noLink">UInt32</span> -1
 </td>
                </tr>
                <tr>
                  <td>
                    <a href="49322f67-f8d4-71e4-c498-d1d345c84e00.htm">RtlUniform</a>
                  </td>
                  <td>
 Generates a uniform random number using D.H. Lehmer's 1948 algorithm, 
 between 0 (zero) to <span class="noLink">UInt32</span></td>
                </tr>
                <tr>
                  <td>
                    <a href="795332fe-dac5-9d8a-66f7-12a312fc2da3.htm">SetCurrentProcessIsCritical</a>
                  </td>
                  <td>
 Establish the current process to be considered a critical process.
 <p />
 When attempting to terminate a critical process, brings down the system in a controlled manner.
 </td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">ToString</span>
                  </td>
                  <td>Returns a string that represents the current object.<br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Extension Methods</h2>
            <div id="IDADASection">
              <table id="ExtensionList" class="table is-hoverable">
                <tr>
                  <td>
                    <a href="4fc2bde6-7e68-b4f7-8406-9f998fc4201d.htm">CanConvertTo</a>
                  </td>
                  <td>
 Determines whether the source object can be converted to the specified target type.
 <br />(Defined by <a href="99b1c09c-36f9-64c9-4e72-adb2f0a4fc1e.htm">ObjectExtensions</a>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="d438a76e-0b10-2e5a-19bb-33849b67af0e.htm">CanConvertTo<span id="LSTA772737F_59" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTA772737F_60" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a>
                  </td>
                  <td>
 Determines whether the source object can be converted to the specified target type.
 <br />(Defined by <a href="99b1c09c-36f9-64c9-4e72-adb2f0a4fc1e.htm">ObjectExtensions</a>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="be81447a-a248-2281-1117-bfc740d6232c.htm">ConvertTo<span id="LSTA772737F_61" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTA772737F_62" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a>
                  </td>
                  <td>
 Converts an object to the specified target type.
 <p />
 If the conversion fails, an exception is thrown.
 <br />(Defined by <a href="99b1c09c-36f9-64c9-4e72-adb2f0a4fc1e.htm">ObjectExtensions</a>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="8021acba-836d-7ab5-0827-131cef22840b.htm">ConvertTo<span id="LSTA772737F_63" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTA772737F_64" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a>
                  </td>
                  <td>
 Converts an object to the specified target type.
 <p />
 If the conversion fails, returns the specified default value.
 <br />(Defined by <a href="99b1c09c-36f9-64c9-4e72-adb2f0a4fc1e.htm">ObjectExtensions</a>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="90e0095b-fa87-d162-71b4-0b19729ac296.htm">IsDisposable</a>
                  </td>
                  <td>
 Determines whether the specified object is a disposable type 
 (i.e., it implements <span class="noLink">IDisposable</span> interface).
 <br />(Defined by <a href="99b1c09c-36f9-64c9-4e72-adb2f0a4fc1e.htm">ObjectExtensions</a>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="b6518cbc-eac7-374e-f53c-70aa031bf15b.htm">Speak</a>
                  </td>
                  <td>
 Speaks the string representation of the source object by using the 
 operating system integrated text-to-speech synthesizer.
 <br />(Defined by <a href="99b1c09c-36f9-64c9-4e72-adb2f0a4fc1e.htm">ObjectExtensions</a>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="a447b4b7-8d2e-a234-f910-4749678e12f8.htm">Speak</a>
                  </td>
                  <td>
 Speaks the string representation of the source object by using the 
 operating system integrated text-to-speech synthesizer.
 <br />(Defined by <a href="99b1c09c-36f9-64c9-4e72-adb2f0a4fc1e.htm">ObjectExtensions</a>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="4ed5be38-075c-b944-23d9-9298e43d9f2a.htm">ThrowIfNull<span id="LSTA772737F_65" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TException<span id="LSTA772737F_66" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a>
                  </td>
                  <td>
 Throws the specified exception if the source object is null.
 <br />(Defined by <a href="99b1c09c-36f9-64c9-4e72-adb2f0a4fc1e.htm">ObjectExtensions</a>)</td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>See Also</h2>
            <div id="seeAlsoSection">
              <h4>Reference</h4>
              <div>
                <a href="acf85973-1453-e67b-362c-38bf21d621bc.htm">NtDll Class</a>
              </div>
              <div>
                <a href="4b8ebc81-6ba2-6fac-af5b-8bb75ecef853.htm">DevCase.Win32.NativeMethods Namespace</a>
              </div>
            </div>
          </div>
          <div id="InThisArticleColumn" class="column is-hidden-mobile">
            <nav class="menu sticky is-hidden">
              <p class="menu-label">
                <strong>In This Article</strong>
              </p>
              <ul id="InThisArticleMenu" class="menu-list">
                <li>
                  <a class="quickLink">Methods</a>
                </li>
                <li>
                  <a class="quickLink">Extension Methods</a>
                </li>
                <li>
                  <a class="quickLink">See Also</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
      <footer id="PageFooter" class="footer border-top py-3 fixedFooter">
        <div class="columns">
          <div class="column">
            <div style="text-align: left;">
  <a href="..\index.html">🏠 Home</a>
  <span style="margin: 0 5px;">|</span>
  <a href="javascript:history.back()">⬅️ Back</a>
  <span style="margin: 0 5px;">|</span>
  <a href="javascript:history.forward()">➡️ Forward</a>
</div>
            <p>ElektroStudios 2024</p>
            <div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:CSG1986%40Hotmail.com?Subject=DevCase%206.0%20API%20Reference%20for%20NET%20Framework">CSG1986@Hotmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div>
          <div class="column"> 
				</div>
        </div>
      </footer>
    </div>
    <script>$(function(){
SetDefaultLanguage("vb");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script>
  </body>
</html>